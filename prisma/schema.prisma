// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://postgres:postgres@postgres/app" // hardcoded because it's an internal docker connection
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String   // hashed with bcrypt
  firstName String
  lastName  String
  createdAt DateTime @default(now())

  // Relations
  medicalProfile MedicalProfessional?
  posts          Post[]
  likes          Like[]
  comments       Comment[]
  
  // Connections - users they are connected to
  connectionsFrom Connection[] @relation("UserConnections")
  connectionsTo   Connection[] @relation("ConnectedUser")
  
  // Job applications
  applications Application[]
  
  // Organization memberships
  organizationMemberships OrganizationMember[]
  
  // Messages
  messagesSent     Message[] @relation("MessagesSent")
  messagesReceived Message[] @relation("MessagesReceived")
}

model MedicalProfessional {
  id           Int    @id @default(autoincrement())
  userId       Int    @unique
  professionType String // "Doctor", "Nurse", "Therapist", "Technician", "Administrator", etc.
  specialty    String
  yearsOfExperience Int
  licenseNumber String?
  currentPosition String?
  bio          String?
  profilePictureUrl String?
  location     String?
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Organization {
  id          Int    @id @default(autoincrement())
  name        String @unique
  type        String // "Hospital", "Clinic", "Research", etc.
  description String?
  location    String?
  website     String?
  logoUrl     String?
  createdAt   DateTime @default(now())
  
  // Relations
  jobPostings JobPosting[]
  members     OrganizationMember[]
}

model OrganizationMember {
  id             Int      @id @default(autoincrement())
  userId         Int
  organizationId Int
  role           String   @default("admin") // "admin", "member"
  createdAt      DateTime @default(now())
  
  // Relations
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  
  @@unique([userId, organizationId])
}

model Post {
  id        Int      @id @default(autoincrement())
  content   String
  imageUrl  String?
  authorId  Int
  createdAt DateTime @default(now())
  
  // Relations
  author   User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  likes    Like[]
  comments Comment[]
}

model JobPosting {
  id            Int      @id @default(autoincrement())
  title         String
  description   String
  requirements  String
  salary        String?
  location      String
  jobType       String   // "Full-time", "Part-time", "Contract", etc.
  specialty     String
  organizationId Int
  createdAt     DateTime @default(now())
  isActive      Boolean  @default(true)
  
  // Relations
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  applications Application[]
}

model Connection {
  id          Int      @id @default(autoincrement())
  requesterId Int
  receiverId  Int
  status      String   // "pending", "accepted", "rejected"
  createdAt   DateTime @default(now())
  
  // Relations
  requester User @relation("UserConnections", fields: [requesterId], references: [id], onDelete: Cascade)
  receiver  User @relation("ConnectedUser", fields: [receiverId], references: [id], onDelete: Cascade)
  
  @@unique([requesterId, receiverId])
}

model Message {
  id         Int      @id @default(autoincrement())
  content    String
  senderId   Int
  receiverId Int
  isRead     Boolean  @default(false)
  createdAt  DateTime @default(now())
  
  // Relations
  sender   User @relation("MessagesSent", fields: [senderId], references: [id], onDelete: Cascade)
  receiver User @relation("MessagesReceived", fields: [receiverId], references: [id], onDelete: Cascade)
}

model Like {
  id     Int @id @default(autoincrement())
  userId Int
  postId Int
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  
  @@unique([userId, postId])
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  userId    Int
  postId    Int
  createdAt DateTime @default(now())
  
  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Application {
  id          Int      @id @default(autoincrement())
  userId      Int
  jobPostingId Int
  coverLetter String?
  resumeUrl   String?
  status      String   @default("pending") // "pending", "reviewed", "accepted", "rejected"
  createdAt   DateTime @default(now())
  
  // Relations
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  jobPosting JobPosting @relation(fields: [jobPostingId], references: [id], onDelete: Cascade)
  
  @@unique([userId, jobPostingId])
}
